feat(scene): Implementar Transform Component con DirectXMath (H2.1)

Historia H2.1 - Transform Component creado

Implementacion:
- Crear src/scene/Transform.h con clase Transform (hereda Component)
- Crear src/scene/Transform.cpp con implementacion
- Miembros: XMFLOAT3 position, rotation (Euler), scale
- Constructor: inicializa position=(0,0,0), rotation=(0,0,0), scale=(1,1,1)

Metodos implementados:
- GetPosition/SetPosition (XMFLOAT3 y x,y,z overloads)
- GetRotation/SetRotation (Euler angles en radianes)
- GetScale/SetScale + SetUniformScale
- GetLocalMatrix(): computa TRS matrix (Scale -> Rotate -> Translate)
- GetWorldMatrix(): retorna local matrix (parent=null por ahora)

Caracteristicas:
- Usa DirectXMath para optimizacion SIMD
- Orden TRS correcto (Scale * Rotation * Translation)
- Rotation con XMMatrixRotationRollPitchYaw (pitch, yaw, roll)
- Scale, rotation y translation independientes
- API limpia con getters/setters inline

Archivos creados:
- src/scene/Transform.h (interfaz)
- src/scene/Transform.cpp (implementacion)

Archivos modificados:
- CMakeLists.txt (SCENE_SRC glob pattern captura Transform.cpp)
- Imagine Studio.vcxproj (Transform.cpp + Transform.h)
- Imagine Studio.vcxproj.filters (Source Files\scene + Header Files\scene)

Compilacion limpia: CMake + MSBuild (0 errores, 0 warnings)

Proxima tarea: H2.2 - Computar matriz local (TRS)

Referencia: H2.1 - Transform Component v1.4.0
