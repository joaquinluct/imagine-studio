{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "Reviewer Agent - Quality Assurance for Imagine Studio. Reviews code quality, verifies AAA standards compliance, detects architectural issues.",
  "label": "Reviewer Agent",
  "config": {
    "participants": [
      {
        "provider": "autogen_agentchat.agents.AssistantAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "Code review and quality assurance agent",
        "label": "ReviewerAssistant",
        "config": {
          "name": "reviewer",
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "Chat completion client for OpenAI hosted models.",
            "label": "OpenAIChatCompletionClient",
            "config": {
              "model": "gpt-4o"
            }
          },
          "workbench": {
            "provider": "autogen_core.tools.StaticWorkbench",
            "component_type": "workbench",
            "version": 1,
            "component_version": 1,
            "description": "Tools for reading code and standards",
            "label": "ReviewerWorkbench",
            "config": {
              "tools": [
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Read file contents for review",
                  "label": "read_file",
                  "config": {
                    "source_code": "def read_file(filepath: str) -> str:\n    \"\"\"Read file contents for code review\"\"\"\n    try:\n        with open(filepath, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading {filepath}: {str(e)}'",
                    "name": "read_file",
                    "description": "Read file contents for code review",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                },
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Read project pillars (AAA standards)",
                  "label": "read_main",
                  "config": {
                    "source_code": "def read_main() -> str:\n    \"\"\"Read docs/MAIN.md for project pillars and AAA standards\"\"\"\n    try:\n        with open('docs/MAIN.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading MAIN.md: {str(e)}'",
                    "name": "read_main",
                    "description": "Read docs/MAIN.md for project pillars and AAA standards",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                },
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Read coding standards",
                  "label": "read_standards",
                  "config": {
                    "source_code": "def read_standards() -> str:\n    \"\"\"Read .github/copilot-instructions.md for coding standards\"\"\"\n    try:\n        with open('.github/copilot-instructions.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading standards: {str(e)}'",
                    "name": "read_standards",
                    "description": "Read .github/copilot-instructions.md for coding standards",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                },
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Check if file is in external directory",
                  "label": "check_external",
                  "config": {
                    "source_code": "def check_external(filepath: str) -> str:\n    \"\"\"Check if file is in external/ directory (should never be modified)\"\"\"\n    if filepath.startswith('external/'):\n        return 'CRITICAL: File is in external/ directory. NEVER modify third-party libraries!'\n    return 'OK: File is not in external/ directory'",
                    "name": "check_external",
                    "description": "Check if file is in external/ directory (should never be modified)",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                }
              ]
            }
          },
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "Unbounded context for code review",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "description": "Reviewer Agent for Imagine Studio - Ensures AAA code quality",
          "system_message": "You are the Reviewer Agent for Imagine Studio (C++ Game Engine, AAA standards, C++14).\n\nYour role:\n1. Review code from Coder Agent\n2. Verify AAA standards compliance\n3. Detect architectural issues\n4. Suggest improvements\n\nCheck against:\n- docs/MAIN.md - Project pillars\n- .github/copilot-instructions.md - Coding standards\n\nReview checklist:\n? Include order correct?\n  - Project headers (\\\"...\\\") first\n  - System headers (<...>) after\n  - Alphabetically within groups\n? Follows C++14 standard?\n? No modifications to external/?\n? UTF-8 with BOM + CRLF?\n? Follows AAA principles?\n  - No temporary solutions\n  - Production-ready from start\n  - Proper error handling\n? DRY/SOLID principles?\n? Comments for complex logic?\n? Proper namespace usage?\n? Memory management correct?\n? Const-correctness?\n\nSeverity levels:\n- CRITICAL: Blocks compilation or violates hard rules (external/ mods, encoding)\n- HIGH: Architectural issues, AAA violations\n- MEDIUM: Style inconsistencies, missing comments\n- LOW: Minor suggestions, optimizations\n\nOutput format:\n```\nReview Status: APPROVED / NEEDS_CHANGES\n\n[If APPROVED]\n? All checks passed\n? Code follows AAA standards\n? Ready for testing\n\n@tester Please compile and test.\n\n[If NEEDS_CHANGES]\n? Issues found:\n\n[SEVERITY] Issue #1: [Description]\nLocation: [File:Line]\nReason: [Explanation]\nSuggestion: [How to fix]\n\n[SEVERITY] Issue #2: [Description]\n...\n\n@coder Please address these issues.\n```\n\nWhen review is complete (approved), say: REVIEW_APPROVED",
          "model_client_stream": false,
          "reflect_on_tool_use": true,
          "tool_call_summary_format": "{result}",
          "metadata": {
            "role": "reviewer",
            "project": "Imagine Studio",
            "language": "C++14",
            "standards": "AAA"
          }
        }
      }
    ],
    "termination_condition": {
      "provider": "autogen_agentchat.base.OrTerminationCondition",
      "component_type": "termination",
      "version": 1,
      "component_version": 1,
      "label": "OrTerminationCondition",
      "config": {
        "conditions": [
          {
            "provider": "autogen_agentchat.conditions.TextMentionTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate when review is approved",
            "label": "TextMentionTermination",
            "config": {
              "text": "REVIEW_APPROVED"
            }
          },
          {
            "provider": "autogen_agentchat.conditions.MaxMessageTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate after max messages",
            "label": "MaxMessageTermination",
            "config": {
              "max_messages": 50,
              "include_agent_event": false
            }
          }
        ]
      }
    },
    "emit_team_events": true
  }
}
