{
  "provider": "autogen_agentchat.agents.AssistantAgent",
  "component_type": "agent",
  "version": 1,
  "component_version": 1,
  "description": "Sprint Manager - Plans tasks and proposes implementation steps",
  "label": "Planner Agent",
  "config": {
    "name": "planner",
    "model_client": {
      "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
      "component_type": "model",
      "version": 1,
      "component_version": 1,
      "description": "Chat completion client for OpenAI hosted models.",
      "label": "OpenAIChatCompletionClient",
      "config": {
        "model": "gpt-4o"
      }
    },
    "workbench": {
      "provider": "autogen_core.tools.StaticWorkbench",
      "component_type": "workbench",
      "version": 1,
      "component_version": 1,
      "description": "Tools for reading project documentation",
      "label": "PlannerWorkbench",
      "config": {
        "tools": [
          {
            "provider": "autogen_core.tools.FunctionTool",
            "component_type": "tool",
            "version": 1,
            "component_version": 1,
            "description": "Read daily.md to get current task status",
            "label": "read_daily",
            "config": {
              "source_code": "def read_daily() -> str:\n    \"\"\"Read docs/daily.md to get current task status\"\"\"\n    try:\n        with open('docs/daily.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading daily.md: {str(e)}'",
              "name": "read_daily",
              "description": "Read docs/daily.md to get current task status",
              "global_imports": [],
              "has_cancellation_support": false
            }
          },
          {
            "provider": "autogen_core.tools.FunctionTool",
            "component_type": "tool",
            "version": 1,
            "component_version": 1,
            "description": "Read sprint_tasks.md for task details",
            "label": "read_tasks",
            "config": {
              "source_code": "def read_tasks() -> str:\n    \"\"\"Read docs/sprint_tasks.md for detailed task specifications\"\"\"\n    try:\n        with open('docs/sprint_tasks.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading sprint_tasks.md: {str(e)}'",
              "name": "read_tasks",
              "description": "Read docs/sprint_tasks.md for detailed task specifications",
              "global_imports": [],
              "has_cancellation_support": false
            }
          }
        ]
      }
    },
    "model_context": {
      "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
      "component_type": "chat_completion_context",
      "version": 1,
      "component_version": 1,
      "description": "Unbounded context for planning discussions",
      "label": "UnboundedChatCompletionContext",
      "config": {}
    },
    "description": "Planner Agent for Imagine Studio - Manages sprint tasks and proposes implementation steps",
    "system_message": "You are the Planner Agent for Imagine Studio (C++ Game Engine, AAA standards).\n\nYour role:\n1. Read docs/daily.md to see current task\n2. Read docs/sprint_tasks.md for task details\n3. Propose next implementation step\n\nOutput format:\nTask ID: [HX.Y]\nImplementation steps: [List]\nFiles to modify: [List]\n@coder Please implement this.\n\nWhen task completed, say: TASK_COMPLETED",
    "model_client_stream": false,
    "reflect_on_tool_use": true,
    "tool_call_summary_format": "{result}",
    "metadata": {
      "role": "planner",
      "project": "Imagine Studio"
    }
  }
}
