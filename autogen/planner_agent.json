{
  "provider": "autogen_agentchat.teams.RoundRobinGroupChat",
  "component_type": "team",
  "version": 1,
  "component_version": 1,
  "description": "Planner Agent - Sprint Manager for Imagine Studio (C++ Game Engine). Reads daily.md and sprint_tasks.md, proposes next implementation steps.",
  "label": "Planner Agent",
  "config": {
    "participants": [
      {
        "provider": "autogen_agentchat.agents.AssistantAgent",
        "component_type": "agent",
        "version": 1,
        "component_version": 1,
        "description": "Sprint planning and task decomposition agent",
        "label": "PlannerAssistant",
        "config": {
          "name": "planner",
          "model_client": {
            "provider": "autogen_ext.models.openai.OpenAIChatCompletionClient",
            "component_type": "model",
            "version": 1,
            "component_version": 1,
            "description": "Chat completion client for OpenAI hosted models.",
            "label": "OpenAIChatCompletionClient",
            "config": {
              "model": "gpt-4o"
            }
          },
          "workbench": {
            "provider": "autogen_core.tools.StaticWorkbench",
            "component_type": "workbench",
            "version": 1,
            "component_version": 1,
            "description": "Tools for reading project documentation",
            "label": "PlannerWorkbench",
            "config": {
              "tools": [
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Read daily.md to get current task status",
                  "label": "read_daily",
                  "config": {
                    "source_code": "def read_daily() -> str:\n    \"\"\"Read docs/daily.md to get current task status\"\"\"\n    try:\n        with open('docs/daily.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading daily.md: {str(e)}'",
                    "name": "read_daily",
                    "description": "Read docs/daily.md to get current task status",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                },
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Read sprint_tasks.md for task details",
                  "label": "read_tasks",
                  "config": {
                    "source_code": "def read_tasks() -> str:\n    \"\"\"Read docs/sprint_tasks.md for detailed task specifications\"\"\"\n    try:\n        with open('docs/sprint_tasks.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading sprint_tasks.md: {str(e)}'",
                    "name": "read_tasks",
                    "description": "Read docs/sprint_tasks.md for detailed task specifications",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                },
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "Read sprint.md for sprint goals",
                  "label": "read_sprint",
                  "config": {
                    "source_code": "def read_sprint() -> str:\n    \"\"\"Read docs/sprint.md for sprint objectives and goals\"\"\"\n    try:\n        with open('docs/sprint.md', 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        return f'Error reading sprint.md: {str(e)}'",
                    "name": "read_sprint",
                    "description": "Read docs/sprint.md for sprint objectives and goals",
                    "global_imports": [],
                    "has_cancellation_support": false
                  }
                },
                {
                  "provider": "autogen_core.tools.FunctionTool",
                  "component_type": "tool",
                  "version": 1,
                  "component_version": 1,
                  "description": "List files in a directory",
                  "label": "list_files",
                  "config": {
                    "source_code": "import os\n\ndef list_files(directory: str) -> str:\n    \"\"\"List all files in a directory\"\"\"\n    try:\n        files = os.listdir(directory)\n        return '\\n'.join(files)\n    except Exception as e:\n        return f'Error listing files in {directory}: {str(e)}'",
                    "name": "list_files",
                    "description": "List all files in a directory",
                    "global_imports": ["os"],
                    "has_cancellation_support": false
                  }
                }
              ]
            }
          },
          "model_context": {
            "provider": "autogen_core.model_context.UnboundedChatCompletionContext",
            "component_type": "chat_completion_context",
            "version": 1,
            "component_version": 1,
            "description": "Unbounded context for planning discussions",
            "label": "UnboundedChatCompletionContext",
            "config": {}
          },
          "description": "Planner Agent for Imagine Studio - Manages sprint tasks and proposes implementation steps",
          "system_message": "You are the Planner Agent for Imagine Studio (C++ Game Engine, AAA standards).\n\nYour role:\n1. Read docs/daily.md to see current task\n2. Read docs/sprint_tasks.md for task details\n3. Propose next implementation step\n4. Break down complex tasks into subtasks\n5. Decide implementation order\n\nContext files (read once at session start):\n- docs/methodology/CORE.md - Methodology fundamentals\n- .github/copilot-instructions.md - Project standards\n\nAlways check:\n- docs/daily.md - Current state\n- docs/sprint_tasks.md - Task specifications\n\nOutput format:\n```\nTask ID: [HX.Y]\nTask name: [Name]\nImplementation steps:\n1. [Step 1]\n2. [Step 2]\n3. [Step 3]\n\nFiles to create/modify:\n- [File 1]\n- [File 2]\n\nSuccess criteria:\n- [Criterion 1]\n- [Criterion 2]\n\n@coder Please implement this.\n```\n\nWhen task is completed, say: TASK_COMPLETED",
          "model_client_stream": false,
          "reflect_on_tool_use": true,
          "tool_call_summary_format": "{result}",
          "metadata": {
            "role": "planner",
            "project": "Imagine Studio",
            "language": "C++14",
            "standards": "AAA"
          }
        }
      }
    ],
    "termination_condition": {
      "provider": "autogen_agentchat.base.OrTerminationCondition",
      "component_type": "termination",
      "version": 1,
      "component_version": 1,
      "label": "OrTerminationCondition",
      "config": {
        "conditions": [
          {
            "provider": "autogen_agentchat.conditions.TextMentionTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate when task is completed",
            "label": "TextMentionTermination",
            "config": {
              "text": "TASK_COMPLETED"
            }
          },
          {
            "provider": "autogen_agentchat.conditions.MaxMessageTermination",
            "component_type": "termination",
            "version": 1,
            "component_version": 1,
            "description": "Terminate after max messages",
            "label": "MaxMessageTermination",
            "config": {
              "max_messages": 50,
              "include_agent_event": false
            }
          }
        ]
      }
    },
    "emit_team_events": true
  }
}
